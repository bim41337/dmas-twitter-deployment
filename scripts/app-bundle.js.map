{"version":3,"sources":["src/admin.js","src/app.js","src/environment.js","src/home.js","src/main.js","src/filters/child-item-filter.js","src/filters/root-item-filter.js","src/helpers/blob-to-url.js","src/helpers/data-uri.js","src/helpers/date-format.js","src/helpers/file-list-to-array.js","src/resources/index.js","src/services/async-http-client.js","src/services/fixtures.js","src/services/messages.js","src/services/tweeter-service.js","src/viewmodels/browse-users/browse-users.js","src/viewmodels/followings/followings.js","src/viewmodels/firehose/firehose.js","src/viewmodels/login/login.js","src/viewmodels/logout/logout.js","src/viewmodels/signup/signup.js","src/viewmodels/settings/settings.js","src/viewmodels/view-user/view-user.js","src/viewmodels/wall/wall.js","src/viewmodels/welcome/welcome.js","src/viewmodels/admin/login/login.js","src/viewmodels/admin/stats/stats.js","src/viewmodels/admin/tweets/tweets.js","src/viewmodels/admin/users/users.js"],"names":["Admin","au","ts","aurelia","service","configureRouter","config","router","map","route","name","moduleId","nav","title","settings","root","mapUnknownRoutes","App","ea","subscribe","reset","navigate","replace","trigger","msg","status","success","setRoot","isAdmin","attached","isAuthenticated","userId","JSON","parse","localStorage","tweeter","getUserData","then","navigateToRoute","debug","testing","Home","configure","use","standardConfiguration","plugin","feature","developmentLogging","start","ChildItemFilterValueConverter","toView","array","filter","item","RootItemFilterValueConverter","BlobToUrlValueConverter","blob","URL","createObjectURL","DataUriValueConverter","value","imgString","from","data","toString","DateFormatValueConverter","dateValue","Date","toLocaleString","FileListToArrayValueConverter","fileList","files","file","size","push","AsyncHttpClient","httpClient","fixtures","http","withBaseUrl","baseUrl","evtAgg","authenticate","url","user","post","response","content","stringify","configuration","withHeader","token","publish","catch","message","clearAuthentication","authenticated","undefined","auth","get","obj","put","delete","Fixtures","LoginStatus","UserUpdate","changedUser","ViewUserUpdate","userData","BrowseUsersUpdate","TweetUpdate","section","tweets","tweetSection","FollowingsUpdate","AdministrationAction","USER_ACTION","TWEET_ACTION","TweeterService","ac","rt","USER_LABEL","TWEETS_LABEL","FIREHOSE_LABEL","FOLLOWINGS_LABEL","userTweets","browseUsers","followingsUsers","followingsTweets","firehoseTweets","viewUserId","makeTweet","formData","getUserTweets","removeTweet","tweetId","register","nickname","email","password","newUser","followings","console","log","res","getViewUserData","withoutFetch","getBrowseUsers","usr","_id","getTweets","getFollowingsUsers","getFollowingsTweets","addFollowing","follId","removeFollowing","getFirehoseTweets","changeUserData","viewUser","getAllUsers","getAllTweets","removeUser","removeAllTweetsForUser","getUserStats","getTweetsStats","getConnectionsStats","login","admLogin","logout","BrowseUsers","users","refreshUsers","Followings","refreshFollowings","Firehose","refreshFirehose","Login","vcf","evtAgr","valContr","createForCurrentScope","validateTrigger","change","addError","e","validate","result","valid","ensure","required","on","Logout","Signup","Settings","changeSettings","ViewUser","viewUserTweets","viewUserFollowingsCount","isFollowedUser","followersCount","calcFollowedUser","findIndex","doFollowingAction","moment","Wall","image","manual","customFormData","creation","tz","imageInst","fileReader","FileReader","onload","contentType","type","readAsArrayBuffer","clearTweetForm","fileInput","refreshWall","satisfies","trim","length","Stats","usersCount","tweetsCount","connectionsCount","refreshTweetsStats","refreshView","refreshUserStats","count","Tweets","allTweets","selectedTweets","refreshTweets","removeSingleTweet","removeSelectedTweets","promises","tweet","Promise","all","err","Users","allUsers","selectedUsers","removeSingleUser","delayRefresh","removeSelectedUsers"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {inject, Aurelia} from 'aurelia-framework';\nimport TweeterService from './services/tweeter-service';\n\n@inject(Aurelia, TweeterService)\nexport class Admin {\n\n  constructor(au, ts) {\n    this.aurelia = au;\n    this.service = ts;\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      {\n        route: ['', 'stats'],\n        name: 'adm-stats',\n        moduleId: 'viewmodels/admin/stats/stats',\n        nav: true,\n        title: 'Statistics',\n        settings: { root: true }\n      },\n      {\n        route: 'users',\n        name: 'adm-users',\n        moduleId: 'viewmodels/admin/users/users',\n        nav: true,\n        title: 'Manage Users',\n        settings: { root: true }\n      },\n      {\n        route: 'tweets',\n        name: 'adm-tweets',\n        moduleId: 'viewmodels/admin/tweets/tweets',\n        nav: true,\n        title: 'Manage Tweets',\n        settings: { root: true }\n      },\n      {\n        route: 'logout',\n        name: 'adm-logout',\n        moduleId: 'viewmodels/logout/logout',\n        nav: true,\n        title: 'Logout',\n        settings: { root: true }\n      }\n    ]);\n    this.router = router;\n\n    config.mapUnknownRoutes('stats');\n  }\n}\n","import {inject, Aurelia} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './services/messages';\nimport TweeterService from './services/tweeter-service';\n\n@inject(Aurelia, TweeterService, EventAggregator)\nexport class App {\n\n  constructor(au, ts, ea) {\n    this.au = au;\n    this.service = ts;\n\n    ea.subscribe(LoginStatus, msg => {\n      this.router.reset();\n      this.router.navigate('', { replace: true, trigger: false });\n      if (msg.status.success === true) {\n        au.setRoot(msg.isAdmin ? 'admin' : 'home');\n      } else {\n        au.setRoot('app');\n      }\n    });\n  }\n\n  attached() {\n    if (this.service.isAuthenticated()) {\n      let userId = JSON.parse(localStorage.tweeter).userId;\n      this.service.getUserData(userId);\n      this.au.setRoot('home').then(() => {\n        this.router.navigateToRoute('yourtweets');\n      });\n    }\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      {\n        route: ['', 'welcome'],\n        name: 'home',\n        moduleId: 'viewmodels/welcome/welcome',\n        nav: true,\n        title: 'Welcome',\n        settings: { root: true }\n      },\n      {\n        route: 'login',\n        name: 'login',\n        moduleId: 'viewmodels/login/login',\n        nav: true,\n        title: 'Login',\n        settings: { root: true }\n      },\n      {\n        route: 'signup',\n        name: 'signup',\n        moduleId: 'viewmodels/signup/signup',\n        nav: true,\n        title: 'Signup',\n        settings: { root: true }\n      },\n      {\n        route: 'adm-login',\n        name: 'adm-login',\n        moduleId: 'viewmodels/admin/login/login',\n        nav: false,\n        title: 'Administration login',\n        settings: { root: false }\n      }\n    ]);\n    this.router = router;\n\n    config.mapUnknownRoutes('');\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {inject, Aurelia} from 'aurelia-framework';\nimport TweeterService from './services/tweeter-service';\n\n@inject(Aurelia, TweeterService)\nexport class Home {\n\n  constructor(au, ts) {\n    this.aurelia = au;\n    this.service = ts;\n  }\n\n  configureRouter(config, router) {\n    config.map([\n      {\n        route: 'settings',\n        name: 'settings',\n        moduleId: 'viewmodels/settings/settings',\n        nav: true,\n        title: 'Settings',\n        settings: { root: true }\n      },\n      {\n        route: 'logout',\n        name: 'logout',\n        moduleId: 'viewmodels/logout/logout',\n        nav: true,\n        title: 'Logout',\n        settings: { root: true }\n      },\n      {\n        route: ['', 'home', 'wall'],\n        name: 'yourtweets',\n        moduleId: 'viewmodels/wall/wall',\n        nav: true,\n        title: 'Your tweets',\n        settings: { root: false }\n      },\n      {\n        route: 'followings',\n        name: 'followings',\n        moduleId: 'viewmodels/followings/followings',\n        nav: true,\n        title: 'Followings',\n        settings: { root: false }\n      },\n      {\n        route: 'firehose',\n        name: 'firehose',\n        moduleId: 'viewmodels/firehose/firehose',\n        nav: true,\n        title: 'Firehose',\n        settings: { root: false }\n      },\n      {\n        route: 'browse-users',\n        name: 'browse-users',\n        moduleId: 'viewmodels/browse-users/browse-users',\n        nav: true,\n        title: 'Browse Users',\n        settings: { root: false }\n      },\n      {\n        route: 'view-user',\n        name: 'view-user',\n        moduleId: 'viewmodels/view-user/view-user',\n        nav: false,\n        title: 'View User Timeline',\n        settings: { root: false }\n      }\n    ]);\n    this.router = router;\n\n    config.mapUnknownRoutes('home');\n  }\n}\n","import environment from './environment';\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .plugin('aurelia-validation')\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","export class ChildItemFilterValueConverter {\n\n  toView(array) {\n    return array.filter(item => item.settings.root === false);\n  }\n\n}\n","export class RootItemFilterValueConverter {\n\n  toView(array) {\n    return array.filter(item => item.settings.root === true);\n  }\n\n}\n","export class BlobToUrlValueConverter {\n\n  toView(blob) {\n    return URL.createObjectURL(blob);\n  }\n\n}\n","import {Buffer} from 'buffer';\n\nexport class DataUriValueConverter {\n\n  toView(value) {\n    let imgString = Buffer.from(value.data).toString('base64');\n    return `data:image/jpeg;base64,${imgString}`;\n  }\n\n}\n","export class DateFormatValueConverter {\n\n  toView(value) {\n    let dateValue = new Date(value);\n    return dateValue.toLocaleString('en-GB');\n  }\n\n}\n","export class FileListToArrayValueConverter {\n\n  toView(fileList) {\n    let files = [];\n    if (!fileList) {\n      return files;\n    }\n    for (let file of fileList) {\n      if (file.size <= 524288) { // 512 kb\n        files.push(fileList.item(file));\n      }\n    }\n    return files;\n  }\n\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","import {inject} from 'aurelia-framework';\nimport {HttpClient} from 'aurelia-http-client';\nimport Fixtures from './fixtures';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {LoginStatus} from './messages';\n\n@inject(HttpClient, Fixtures, EventAggregator)\nexport default class AsyncHttpClient {\n\n  constructor(httpClient, fixtures, ea) {\n    this.http = httpClient;\n    this.http.configure(http => {\n      http.withBaseUrl(fixtures.baseUrl);\n    });\n    this.evtAgg = ea;\n  }\n\n  authenticate(url, user, isAdmin) {\n    return this.http.post(url, user).then(response => {\n      const status = response.content;\n      if (status.success) {\n        localStorage.tweeter = JSON.stringify(response.content);\n        this.http.configure(configuration => {\n          configuration.withHeader('Authorization', 'bearer ' + response.content.token);\n        });\n      }\n      this.evtAgg.publish(new LoginStatus(status, isAdmin));\n\n      return response.content.userId;\n    }).catch(error => {\n      const status = {\n        success: false,\n        message: 'service not available'\n      };\n      this.evtAgg.publish(new LoginStatus(status));\n    });\n  }\n\n  clearAuthentication() {\n    localStorage.tweeter = null;\n    this.http.configure(configuration => {\n      configuration.withHeader('Authorization', '');\n    });\n  }\n\n  isAuthenticated() {\n    let authenticated = false;\n    let tweeter = localStorage.tweeter;\n\n    if (tweeter !== undefined && tweeter !== 'null') {\n      authenticated = true;\n      this.http.configure(http => {\n        const auth = JSON.parse(tweeter);\n        http.withHeader('Authorization', 'bearer ' + auth.token);\n      });\n    }\n    return authenticated;\n  }\n\n  get(url) {\n    return this.http.get(url);\n  }\n\n  post(url, obj) {\n    return this.http.post(url, obj);\n  }\n\n  put(url, obj) {\n    return this.http.put(url, obj);\n  }\n\n  delete(url) {\n    return this.http.delete(url);\n  }\n}\n","export default class Fixtures {\n\n  // baseUrl = 'http://localhost:4000';\n  baseUrl = 'https://tweeter-bim41337.herokuapp.com';\n\n}\n","export class LoginStatus {\n  constructor(status, isAdmin) {\n    this.status = status;\n    this.isAdmin = isAdmin;\n  }\n}\n\nexport class UserUpdate {\n  constructor(changedUser) {\n    this.changedUser = changedUser;\n  }\n}\n\nexport class ViewUserUpdate {\n  constructor(userData) {\n    this.userData = userData;\n  }\n}\n\nexport class BrowseUsersUpdate {\n  constructor() {\n  }\n}\n\nexport class TweetUpdate {\n  constructor(section, tweets) {\n    this.tweetSection = section;\n    this.tweets = tweets;\n  }\n}\n\nexport class FollowingsUpdate {\n  constructor() {\n  }\n}\n\nexport class AdministrationAction {\n  USER_ACTION = 'user';\n  TWEET_ACTION = 'tweet';\n  constructor(section) {\n    this.section = section;\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport {Router} from 'aurelia-router';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport AsyncHttpClient from './async-http-client';\nimport {\n  LoginStatus, UserUpdate, TweetUpdate, FollowingsUpdate, ViewUserUpdate,\n  BrowseUsersUpdate\n} from './messages';\n\n@inject(EventAggregator, AsyncHttpClient, Router)\nexport default class TweeterService {\n\n  USER_LABEL = 'user';\n  TWEETS_LABEL = 'tweets';\n  FIREHOSE_LABEL = 'firehose';\n  FOLLOWINGS_LABEL = 'followings';\n\n  userData = null;\n  userTweets = [];\n  browseUsers = [];\n  followingsUsers = [];\n  followingsTweets = [];\n  firehoseTweets = [];\n  viewUserId = null;\n\n  constructor(ea, ac, rt) {\n    this.evtAgg = ea;\n    this.httpClient = ac;\n    this.router = rt;\n  }\n\n  makeTweet(formData) {\n    this.httpClient.post('/api/tweets', formData).then(res => {\n      this.getUserTweets();\n    });\n  }\n\n  removeTweet(tweetId) {\n    return this.httpClient.delete('/api/tweets/' + tweetId);\n  }\n\n  register(nickname, email, password) {\n    const newUser = {\n      nickname: nickname,\n      email: email,\n      password: password,\n      followings: []\n    };\n    this.httpClient.post('/api/users', newUser).then(res => {\n      console.log(res);\n      this.router.navigate('login');\n    });\n  }\n\n  getViewUserData(userId) {\n    this.httpClient.get('/api/users/' + userId).then(res => {\n      this.evtAgg.publish(new ViewUserUpdate(res.content));\n    });\n  }\n\n  getUserData(userId, publish, withoutFetch) {\n    this.httpClient.get('/api/users/' + userId).then(res => {\n      console.log('Set active user: ' + res.content.user.nickname);\n      this.userData = res.content.user;\n      if (publish === true) {\n        this.evtAgg.publish(new UserUpdate(this.userData.user));\n      }\n      if (!withoutFetch) {\n        this.getUserTweets();\n      }\n    });\n  }\n\n  getBrowseUsers() {\n    console.log('TS: Fetching users for browsing');\n    this.httpClient.get('/api/users').then(res => {\n      this.browseUsers = res.content.filter(usr => usr._id !== this.userData._id);\n      this.evtAgg.publish(new BrowseUsersUpdate());\n    });\n  }\n\n  getTweets(userId) {\n    console.log('TS: Fetching tweets');\n    this.httpClient.get('/api/tweets/user/' + userId).then(res => {\n      this.evtAgg.publish(new TweetUpdate(this.TWEETS_LABEL, res.content));\n    });\n  }\n\n  getUserTweets() {\n    console.log('TS: Fetching user tweets');\n    this.httpClient.get('/api/tweets/user/' + this.userData._id).then(res => {\n      this.userTweets = res.content;\n      this.evtAgg.publish(new TweetUpdate(this.USER_LABEL));\n    });\n  }\n\n  getFollowingsUsers() {\n    console.log('TS: Fetching followings users');\n    this.httpClient.get(`/api/users/${this.userData._id}/followings`).then(res => {\n      this.followingsUsers = res.content;\n      this.evtAgg.publish(new FollowingsUpdate());\n    });\n  }\n\n  getFollowingsTweets() {\n    console.log('TS: Fetching followings tweets');\n    this.httpClient.get(`/api/tweets/user/${this.userData._id}/followings`).then(res => {\n      this.followingsTweets = res.content;\n      this.evtAgg.publish(new TweetUpdate(this.FOLLOWINGS_LABEL));\n    });\n  }\n\n  addFollowing() {\n    console.log('TS: Adding following entry');\n    this.httpClient.post(`/api/users/${this.userData._id}/followings`, { follId: this.viewUserId }).then(res => {\n      this.router.navigate('followings');\n    });\n  }\n\n  removeFollowing() {\n    console.log('TS: Removing following entry');\n    this.httpClient.put(`/api/users/${this.userData._id}/followings`, { follId: this.viewUserId }).then(res => {\n      this.router.navigate('followings');\n    });\n  }\n\n  getFirehoseTweets() {\n    console.log('TS: Fetching firehose tweets');\n    this.httpClient.get('/api/tweets').then(res => {\n      this.firehoseTweets = res.content;\n      this.evtAgg.publish(new TweetUpdate(this.FIREHOSE_LABEL));\n    });\n  }\n\n  changeUserData(changedUser) {\n    this.httpClient.put('/api/users/' + this.userData._id, changedUser).then(res => {\n      this.userData = res.content;\n      this.evtAgg.publish(new UserUpdate(this.userData));\n      this.router.navigate('wall');\n    });\n  }\n\n  viewUser(userId) {\n    this.viewUserId = userId;\n    this.router.navigate('view-user');\n  }\n\n  // ### ADMIN ONLY METHODS ###\n\n  getAllUsers() {\n    console.log('TS: Fetching all users for administration');\n    return this.httpClient.get('/api/users');\n  }\n\n  getAllTweets() {\n    console.log('TS: Fetching all tweets for administration');\n    return this.httpClient.get('/api/tweets');\n  }\n\n  removeUser(userId) {\n    return this.httpClient.delete('/api/users/' + userId);\n  }\n\n  removeAllTweetsForUser(userId) {\n    return this.httpClient.delete('/api/tweets/user/' + userId);\n  }\n\n  getUserStats() {\n    return this.httpClient.get('/api/stats/users');\n  }\n\n  getTweetsStats() {\n    return this.httpClient.get('/api/stats/tweets');\n  }\n\n  getConnectionsStats() {\n    return this.httpClient.get('/api/stats/connections');\n  }\n\n  login(email, password) {\n    const user = {\n      email: email,\n      password: password\n    };\n    this.httpClient.authenticate('/api/users/authenticate', user).then(res => {\n      if (res) {\n        this.getUserData(res, true);\n      }\n    });\n  }\n\n  admLogin(email, password) {\n    const user = {\n      email: email,\n      password: password\n    };\n    this.httpClient.authenticate('/api/users/authenticate', user, true).then(res => {\n      if (res) {\n        this.getUserData(res, false, true);\n      }\n    });\n  }\n\n  logout() {\n    const status = {\n      success: false,\n      message: ''\n    };\n    this.httpClient.clearAuthentication();\n    this.userData = null;\n    this.evtAgg.publish(new LoginStatus(status));\n  }\n\n  isAuthenticated() {\n    return this.httpClient.isAuthenticated();\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport TweeterService from '../../services/tweeter-service';\nimport {BrowseUsersUpdate} from '../../services/messages';\n\n@inject(TweeterService, EventAggregator)\nexport class BrowseUsers {\n\n  users = [];\n\n  constructor(ts, ea) {\n    this.service = ts;\n    this.evtAgg = ea;\n\n    this.evtAgg.subscribe(BrowseUsersUpdate, msg => {\n      this.users = this.service.browseUsers;\n    });\n  }\n\n  attached() {\n    this.service.getBrowseUsers();\n  }\n\n  viewUser(userId) {\n    this.service.viewUser(userId);\n  }\n\n  refreshUsers() {\n    this.service.getBrowseUsers();\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport TweeterService from './../../services/tweeter-service';\nimport {FollowingsUpdate, TweetUpdate} from '../../services/messages';\n\n@inject(TweeterService, EventAggregator)\nexport class Followings {\n\n  followingsUsers = [];\n  followingsTweets = [];\n\n  constructor(ts, ea) {\n    this.service = ts;\n    this.evtAgg = ea;\n\n    this.evtAgg.subscribe(TweetUpdate, msg => {\n      if (msg.tweetSection === this.service.FOLLOWINGS_LABEL) {\n        this.followingsTweets = this.service.followingsTweets;\n      }\n    });\n    this.evtAgg.subscribe(FollowingsUpdate, msg => {\n      this.followingsUsers = this.service.followingsUsers;\n    });\n  }\n\n  viewUser(userId) {\n    this.service.viewUser(userId);\n  }\n\n  attached() {\n    this.refreshFollowings();\n  }\n\n  refreshFollowings() {\n    this.service.getFollowingsUsers();\n    this.service.getFollowingsTweets();\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport TweeterService from './../../services/tweeter-service';\nimport {TweetUpdate} from '../../services/messages';\n\n@inject(TweeterService, EventAggregator)\nexport class Firehose {\n\n  firehoseTweets = [];\n\n  constructor(ts, ea) {\n    this.service = ts;\n    this.evtAgg = ea;\n\n    this.evtAgg.subscribe(TweetUpdate, msg => {\n      if (msg.tweetSection === this.service.FIREHOSE_LABEL) {\n        this.firehoseTweets = this.service.firehoseTweets;\n      }\n    });\n  }\n\n  attached() {\n    this.refreshFirehose();\n  }\n\n  refreshFirehose() {\n    this.service.getFirehoseTweets();\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {ValidationControllerFactory, ValidationRules, validateTrigger} from 'aurelia-validation';\nimport TweeterService from '../../services/tweeter-service';\nimport {LoginStatus} from '../../services/messages';\n\n@inject(TweeterService, EventAggregator, ValidationControllerFactory)\nexport class Login {\n\n  email = '';\n  password = '';\n\n  constructor(ts, ea, vcf) {\n    this.service = ts;\n    this.evtAgr = ea;\n    this.valContr = vcf.createForCurrentScope();\n    this.valContr.validateTrigger = validateTrigger.change;\n\n    this.evtAgr.subscribe(LoginStatus, msg => {\n      if (!msg.status.success) {\n        this.valContr.addError(msg.status.message);\n      }\n    });\n  }\n\n  login(e) {\n    this.valContr.validate().then(result => {\n      if (result.valid) {\n        console.log(`Logging in: ${this.email}`);\n        this.valContr.reset();\n        this.service.login(this.email, this.password);\n      }\n    });\n  }\n\n}\n\nValidationRules\n  .ensure('email').email().required()\n  .ensure('password').required()\n  .on(Login);\n","import {inject} from 'aurelia-framework';\nimport TweeterService from './../../services/tweeter-service';\n\n@inject(TweeterService)\nexport class Logout {\n\n  constructor(ts) {\n    this.service = ts;\n  }\n\n  logout() {\n    console.log('Logging out');\n    this.service.logout();\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport TweeterService from '../../services/tweeter-service';\nimport {ValidationControllerFactory, ValidationRules, validateTrigger} from 'aurelia-validation';\n\n@inject(TweeterService, ValidationControllerFactory)\nexport class Signup {\n\n  nickname = '';\n  email = '';\n  password = '';\n\n  constructor(ts, vcf) {\n    this.service = ts;\n    this.valContr = vcf.createForCurrentScope();\n    this.valContr.validateTrigger = validateTrigger.change;\n  }\n\n  register(e) {\n    this.valContr.validate().then(result => {\n      if (result.valid) {\n        console.log(`New registration: ${this.email}`);\n        this.service.register(this.nickname, this.email, this.password);\n      }\n    });\n  }\n\n}\n\nValidationRules\n  .ensure('nickname').required()\n  .ensure('email').email().required()\n  .ensure('password').required()\n  .on(Signup);\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {ValidationControllerFactory, ValidationRules, validateTrigger} from 'aurelia-validation';\nimport TweeterService from '../../services/tweeter-service';\nimport {UserUpdate} from '../../services/messages';\n\n@inject(TweeterService, EventAggregator, ValidationControllerFactory)\nexport class Settings {\n\n  userData = null;\n\n  constructor(ts, ea, vcf) {\n    this.service = ts;\n    this.evtAgg = ea;\n    this.valContr = vcf.createForCurrentScope();\n    this.valContr.validateTrigger = validateTrigger.change;\n\n    this.evtAgg.subscribe(UserUpdate, msg => {\n      this.userData = msg.changedUser;\n    });\n  }\n\n  attached() {\n    this.userData = this.service.userData;\n  }\n\n  changeSettings(e) {\n    this.valContr.validate().then(result => {\n      if (result.valid) {\n        this.valContr.reset();\n        this.service.changeUserData(this.userData);\n      }\n    });\n  }\n\n}\n\nValidationRules\n  .ensure('userData.nickname').required()\n  .ensure('userData.email').email().required()\n  .ensure('userData.password').required()\n  .on(Settings);\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport TweeterService from './../../services/tweeter-service';\nimport {TweetUpdate, ViewUserUpdate} from '../../services/messages';\n\n@inject(TweeterService, EventAggregator)\nexport class ViewUser {\n\n  viewUser = null;\n  viewUserTweets = [];\n  viewUserFollowingsCount = 0;\n  isFollowedUser = undefined;\n\n  constructor(ts, ea) {\n    this.service = ts;\n    this.evtAgg = ea;\n\n    this.evtAgg.subscribe(TweetUpdate, msg => {\n      if (msg.tweetSection === this.service.TWEETS_LABEL) {\n        this.viewUserTweets = msg.tweets;\n      }\n    });\n    this.evtAgg.subscribe(ViewUserUpdate, msg => {\n      this.viewUser = msg.userData.user;\n      this.viewUserFollowingsCount = msg.userData.followersCount;\n    });\n  }\n\n  calcFollowedUser() {\n    this.isFollowedUser = this.service.followingsUsers.findIndex(usr => usr._id === this.service.viewUserId) !== -1;\n  }\n\n  doFollowingAction() {\n    if (this.isFollowedUser) {\n      this.service.removeFollowing();\n    } else {\n      this.service.addFollowing();\n    }\n  }\n\n  attached() {\n    let userId = this.service.viewUserId;\n    this.service.getTweets(userId);\n    this.service.getViewUserData(userId);\n    this.calcFollowedUser();\n  }\n\n}\n","/* eslint-disable indent */\nimport {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {ValidationControllerFactory, ValidationRules, validateTrigger} from 'aurelia-validation';\nimport {Buffer} from 'buffer';\nimport TweeterService from './../../services/tweeter-service';\nimport * as moment from 'moment-timezone';\nimport {TweetUpdate} from '../../services/messages';\n\n@inject(TweeterService, EventAggregator, ValidationControllerFactory)\nexport class Wall {\n\n  userTweets = [];\n  message = '';\n  image = null;\n\n  constructor(ts, ea, vcf) {\n    this.service = ts;\n    this.evtAgg = ea;\n    this.valContr = vcf.createForCurrentScope();\n    this.valContr.validateTrigger = validateTrigger.manual;\n\n    this.evtAgg.subscribe(TweetUpdate, msg => {\n      if (msg.tweetSection === this.service.USER_LABEL) {\n        this.userTweets = this.service.userTweets;\n      }\n    });\n  }\n\n  attached() {\n    this.userTweets = this.service.userTweets;\n  }\n\n  makeTweet(e) {\n    this.valContr.validate().then(result => {\n      if (result.valid) {\n        let customFormData = {\n          message: this.message,\n          creation: moment.tz(),\n          user: this.service.userData._id\n        };\n\n        if (this.image) {\n          let imageInst = this.image.item(0);\n          let fileReader = new FileReader();\n          fileReader.onload = () => {\n            customFormData.image = {\n              data: Buffer.from(fileReader.result),\n              contentType: imageInst.type\n            };\n            this.service.makeTweet(customFormData);\n          };\n          fileReader.readAsArrayBuffer(imageInst);\n        } else {\n          this.service.makeTweet(customFormData);\n        }\n\n        this.valContr.reset();\n        this.clearTweetForm();\n      }\n    });\n  }\n\n  removeTweet(tweetId) {\n    this.service.removeTweet(tweetId).then(res => {\n      console.log(`Removed tweet ${tweetId}`);\n      this.service.getUserTweets();\n    });\n  }\n\n  clearTweetForm() {\n    this.message = '';\n    this.image = null;\n    this.fileInput.value = null;\n  }\n\n  refreshWall() {\n    this.service.getUserTweets();\n  }\n\n}\n\nValidationRules\n  .ensure('message').required().satisfies((value, obj) => {\n  return value.trim().length <= 140;\n})\n  .ensure('image').satisfies((value, obj) => {\n  if (value) {\n    return value.length === 0 || value.item(0).size <= 524288;\n  }\n  return true;\n}).on(Wall);\n","export class Home {\n\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport {ValidationControllerFactory, ValidationRules, validateTrigger} from 'aurelia-validation';\nimport TweeterService from '../../../services/tweeter-service';\n\n@inject(TweeterService, EventAggregator, ValidationControllerFactory)\nexport class Login {\n\n  email = 'admin@user.de';\n  password = '';\n\n  constructor(ts, ea, vcf) {\n    this.service = ts;\n    this.evtAgr = ea;\n    this.valContr = vcf.createForCurrentScope();\n    this.valContr.validateTrigger = validateTrigger.manual;\n  }\n\n  login(e) {\n    this.valContr.validate().then(result => {\n      if (result.valid) {\n        console.log('Administration login');\n        this.valContr.reset();\n        this.service.admLogin(this.email, this.password);\n      }\n    });\n  }\n\n}\n\nValidationRules\n  .ensure('email').email().required()\n  .ensure('password').required()\n  .on(Login);\n","/* eslint-disable indent */\nimport {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport TweeterService from '../../../services/tweeter-service';\nimport {AdministrationAction} from '../../../services/messages';\n\n@inject(TweeterService, EventAggregator)\nexport class Stats {\n\n  usersCount = undefined;\n  tweetsCount = undefined;\n  connectionsCount = undefined;\n\n  constructor(ts, ea) {\n    this.service = ts;\n    this.evtAgg = ea;\n\n    this.evtAgg.subscribe(AdministrationAction, msg => {\n      switch (msg.section) {\n        case 'tweet':\n          this.refreshTweetsStats();\n          break;\n        case 'user':\n          this.refreshView();\n          break;\n        default:\n          // Ignore\n          break;\n      }\n    });\n  }\n\n  attached() {\n    if (this.usersCount === undefined) {\n      this.refreshView();\n    }\n  }\n\n  refreshUserStats() {\n    this.service.getUserStats().then(res => {\n      this.usersCount = res.content.count;\n    });\n    this.service.getConnectionsStats().then(res => {\n      this.connectionsCount = res.content.count;\n    });\n  }\n\n  refreshTweetsStats() {\n    this.service.getTweetsStats().then(res => {\n      this.tweetsCount = res.content.count;\n    });\n  }\n\n  refreshView() {\n    this.refreshUserStats();\n    this.refreshTweetsStats();\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport TweeterService from '../../../services/tweeter-service';\nimport {AdministrationAction} from '../../../services/messages';\n\n@inject(TweeterService, EventAggregator)\nexport class Tweets {\n\n  allTweets = [];\n  selectedTweets = [];\n\n  constructor(ts, ea) {\n    this.service = ts;\n    this.evtAgg = ea;\n  }\n\n  attached() {\n    if (this.allTweets.length === 0) {\n      this.refreshTweets();\n    }\n  }\n\n  removeSingleTweet(tweetId) {\n    this.service.removeTweet(tweetId).then(res => {\n      console.log('Removed tweet with ID ' + tweetId);\n      this.refreshTweets();\n    });\n  }\n\n  removeSelectedTweets() {\n    let promises = [];\n    for (let tweet of this.selectedTweets) {\n      promises.push(this.service.removeTweet(tweet._id));\n    }\n    Promise.all(promises).then(res => {\n      console.log(`Bulk removed ${this.selectedTweets.length} tweets`);\n      this.refreshTweets();\n      this.evtAgg.publish(new AdministrationAction('tweet'));\n    }).catch(err => {\n      console.log('Error during tweet bulk removal');\n      console.log(err);\n    });\n  }\n\n  refreshTweets() {\n    this.service.getAllTweets().then(res => {\n      this.allTweets = res.content;\n      this.selectedTweets = [];\n    });\n  }\n\n}\n","import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\nimport TweeterService from '../../../services/tweeter-service';\nimport {AdministrationAction} from '../../../services/messages';\n\n@inject(TweeterService, EventAggregator)\nexport class Users {\n\n  allUsers = [];\n  selectedUsers = [];\n\n  constructor(ts, ea) {\n    this.service = ts;\n    this.evtAgg = ea;\n  }\n\n  attached() {\n    if (this.allUsers.length === 0) {\n      this.refreshUsers();\n    }\n  }\n\n  removeSingleUser(userId, delayRefresh) {\n    this.service.removeAllTweetsForUser(userId).then(res => {\n      console.log('Removed all tweets for User-ID ' + userId);\n      return this.service.removeUser(userId);\n    }).then(res => {\n      console.log('Successfully removed user with ID ' + userId);\n      if (!delayRefresh) {\n        this.refreshUsers();\n        this.evtAgg.publish(new AdministrationAction('user'));\n      }\n    }).catch(err => {\n      console.log('Error while cascading remove option for user with ID ' + userId);\n      console.log(err);\n    });\n  }\n\n  removeSelectedUsers() {\n    let promises = [];\n    for (let user of this.selectedUsers) {\n      promises.push(this.service.removeAllTweetsForUser(user._id).then(res => {\n        console.log('Removed all tweets for User-ID ' + user._id);\n        return this.service.removeUser(user._id);\n      }));\n    }\n    Promise.all(promises).then(res => {\n      console.log(`Bulk removed ${this.selectedUsers.length} tweets`);\n      this.refreshUsers();\n      this.evtAgg.publish(new AdministrationAction('user'));\n    }).catch(err => {\n      console.log('Error during user bulk removal');\n      console.log(err);\n    });\n  }\n\n  refreshUsers() {\n    this.service.getAllUsers().then(res => {\n      this.allUsers = res.content.filter(usr => usr._id !== this.service.userData._id);\n      this.selectedUsers = [];\n    });\n  }\n\n}\n"],"sourceRoot":".."}